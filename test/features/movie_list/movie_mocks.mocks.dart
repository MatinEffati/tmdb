// Mocks generated by Mockito 5.4.5 from annotations
// in tmdb/test/features/movie_list/movie_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i4;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:tmdb/core/error/failures.dart' as _i11;
import 'package:tmdb/core/network/network_client.dart' as _i6;
import 'package:tmdb/core/usecases/no_params.dart' as _i14;
import 'package:tmdb/features/movie_list/data/datasources/movie_remote_data_source.dart'
    as _i3;
import 'package:tmdb/features/movie_list/data/models/movie_model.dart' as _i9;
import 'package:tmdb/features/movie_list/data/repositories/movie_repository.dart'
    as _i10;
import 'package:tmdb/features/movie_list/domain/entities/movie_entity.dart'
    as _i12;
import 'package:tmdb/features/movie_list/domain/repositories/movie_repository.dart'
    as _i5;
import 'package:tmdb/features/movie_list/domain/usecases/get_popular_movies.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRemoteDataSource_1 extends _i1.SmartFake
    implements _i3.MovieRemoteDataSource {
  _FakeMovieRemoteDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRepository_3 extends _i1.SmartFake
    implements _i5.MovieRepository {
  _FakeMovieRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkClient extends _i1.Mock implements _i6.NetworkClient {
  MockNetworkClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  String get imageBaseUrl => (super.noSuchMethod(
        Invocation.getter(#imageBaseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#imageBaseUrl),
        ),
      ) as String);

  @override
  _i8.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i8.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [path],
            {#queryParameters: queryParameters},
          ),
        )),
      ) as _i8.Future<_i2.Response<dynamic>>);

  @override
  String imageUrl(
    String? size,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #imageUrl,
          [
            size,
            path,
          ],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #imageUrl,
            [
              size,
              path,
            ],
          ),
        ),
      ) as String);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i3.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i9.MovieModel>> getPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue: _i8.Future<List<_i9.MovieModel>>.value(<_i9.MovieModel>[]),
      ) as _i8.Future<List<_i9.MovieModel>>);
}

/// A class which mocks [MovieRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepositoryImpl extends _i1.Mock
    implements _i10.MovieRepositoryImpl {
  MockMovieRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeMovieRemoteDataSource_1(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i3.MovieRemoteDataSource);

  @override
  _i8.Future<_i4.Either<_i11.Failure, List<_i12.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue:
            _i8.Future<_i4.Either<_i11.Failure, List<_i12.Movie>>>.value(
                _FakeEither_2<_i11.Failure, List<_i12.Movie>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
          ),
        )),
      ) as _i8.Future<_i4.Either<_i11.Failure, List<_i12.Movie>>>);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i13.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.MovieRepository);

  @override
  _i8.Future<_i4.Either<_i11.Failure, List<_i12.Movie>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i4.Either<_i11.Failure, List<_i12.Movie>>>.value(
                _FakeEither_2<_i11.Failure, List<_i12.Movie>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i4.Either<_i11.Failure, List<_i12.Movie>>>);
}
